import React, { useState } from "react";
import "./UploadFormModal.css";

const UploadFormModal = ({ onClose, onSubmit, members = [] }) => {
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState(""); // üî∏ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  const [file, setFile] = useState(null);
  const [selectedIds, setSelectedIds] = useState([]);
  const [filter, setFilter] = useState({
    district: "",
    generation: "",
    type: "",
  });

  const unique = (key) => [
    ...new Set(members.map((m) => m[key]).filter(Boolean)),
  ];

  const filtered = members.filter((m) => {
    const matchDistrict = filter.district
      ? m.district === filter.district
      : true;
    const matchGeneration = filter.generation
      ? m.generation === filter.generation
      : true;
    const matchType = filter.type ? m.type === filter.type : true;
    return matchDistrict && matchGeneration && matchType;
  });

  const toggleSelect = (id) => {
    setSelectedIds((prev) =>
      prev.includes(id) ? prev.filter((i) => i !== id) : [...prev, id]
    );
  };

  const selectAll = () => {
    const allIds = filtered.map((m) => m.member_id);
    setSelectedIds(allIds);
  };

  const clearAll = () => setSelectedIds([]);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!file || !title || selectedIds.length === 0) return;

    selectedIds.forEach((id) => {
      const formData = new FormData();
      formData.append("title", title);
      formData.append("description", description); // ‚úÖ ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
      formData.append("file", file);
      formData.append("memberId", id);
      onSubmit(formData);
    });

    onClose();
  };

  return (
    <div className="upload-modal-overlay">
      <div className="upload-modal">
        <h3>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</h3>
        <form onSubmit={handleSubmit}>
          {/* üîπ ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ */}
          <input
            type="text"
            placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
          />

          {/* üîπ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
          <textarea
            placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            rows={3}
          />

          {/* üîπ ‡πÑ‡∏ü‡∏•‡πå */}
          <input type="file" onChange={(e) => setFile(e.target.files[0])} />

          {/* üîπ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå */}
          <div className="filter-row">
            <select
              value={filter.district}
              onChange={(e) =>
                setFilter({ ...filter, district: e.target.value })
              }
            >
              <option value="">-- ‡∏ó‡∏∏‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ --</option>
              {unique("district").map((v) => (
                <option key={v} value={v}>
                  {v}
                </option>
              ))}
            </select>

            <select
              value={filter.generation}
              onChange={(e) =>
                setFilter({ ...filter, generation: e.target.value })
              }
            >
              <option value="">-- ‡∏ó‡∏∏‡∏Å‡∏£‡∏∏‡πà‡∏ô --</option>
              {unique("generation").map((v) => (
                <option key={v} value={v}>
                  {v}
                </option>
              ))}
            </select>

            <select
              value={filter.type}
              onChange={(e) => setFilter({ ...filter, type: e.target.value })}
            >
              <option value="">-- ‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó --</option>
              {unique("type").map((v) => (
                <option key={v} value={v}>
                  {v}
                </option>
              ))}
            </select>
          </div>

          {/* üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
          <div className="select-controls">
            <button type="button" onClick={selectAll}>
              ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            </button>
            <button type="button" onClick={clearAll}>
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            </button>
            <span style={{ marginLeft: "auto", fontSize: 12 }}>
              ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß {selectedIds.length} ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠
            </span>
          </div>

          {/* üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å */}
          <div className="member-table-scroll">
            <table className="member-checkbox-table">
              <thead>
                <tr>
                  <th></th>
                  <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                  <th>‡∏≠‡∏≥‡πÄ‡∏†‡∏≠</th>
                  <th>‡∏£‡∏∏‡πà‡∏ô</th>
                  <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
                </tr>
              </thead>
              <tbody>
                {filtered.map((m) => (
                  <tr key={m.member_id}>
                    <td>
                      <input
                        type="checkbox"
                        checked={selectedIds.includes(m.member_id)}
                        onChange={() => toggleSelect(m.member_id)}
                      />
                    </td>
                    <td>{m.full_name}</td>
                    <td>{m.district || "-"}</td>
                    <td>{m.generation || "-"}</td>
                    <td>{m.type || "-"}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á */}
          <div className="form-buttons">
            <button type="submit">‡∏™‡πà‡∏á</button>
            <button type="button" onClick={onClose}>
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default UploadFormModal;
